pub mod operations;
pub mod error;
pub mod status;
pub mod client;

mod request;
mod response;

pub const MANAGEMENT_NODE_ADDRESS: &str = "$management";

pub trait ManageableEntityAttributes {
    // Attributes

    /// A case-sensitive string identifying the entity. It MUST be unique within the Management Node
    /// through which it is accessed. It MAY change during its lifetime. When a new Manageable
    /// Entity is created the name MUST be supplied via the CREATE operation.
    fn entity_name(&self) -> &str;

    /// A case-sensitive string identifying the entity. It MUST be unique within the Management Node
    /// through which it is accessed. It MAY change during its lifetime. When a new Manageable
    /// Entity is created the name MUST be supplied via the CREATE operation.
    fn set_entity_name(&mut self);

    /// An immutable, case-sensitive string identifying the entity. When a new Manageable Entity is
    /// created the identity is not supplied by via the CREATE operation, rather the identity is
    /// generated by the system under management. The identity MUST be unique within the Management
    /// Node through which it is accessed (and within a given implementation may be guaranteed to be
    /// unique within a larger domain).
    fn entity_identity(&self) -> &str;

    /// A case-sensitive string identifying the Manageable Entity Type for the entity.
    fn entity_type(&self) -> &str;
}

pub trait TypeAnnotation {

}

pub trait ManagementNode {

}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}
